name: Auto Label

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Label PR based on branch
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            const title = context.payload.pull_request.title.toLowerCase();
            let labels = [];
            
            // Labels basés sur le nom de la branche
            if (branch.startsWith('feature/')) {
              labels.push('✨ feature');
            } else if (branch.startsWith('fix/')) {
              labels.push('🐛 bug');
            }
            
            // Labels basés sur le titre
            if (title.includes('doc')) {
              labels.push('📚 documentation');
            } else if (title.includes('test')) {
              labels.push('🔧 maintenance');
            }
            
            // Labels de statut par défaut
            labels.push('👀 needs review');
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: labels
              });
            }

      - name: Label issues based on title
        if: github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            let labels = [];
            
            if (title.includes('[bug]')) {
              labels.push('🐛 bug');
            } else if (title.includes('[feature]')) {
              labels.push('✨ feature');
            } else if (title.includes('[trad]')) {
              labels.push('🌍 translation');
            }
            
            // Labels de priorité par défaut
            labels.push('🟡 medium');
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: labels
              });
            }
