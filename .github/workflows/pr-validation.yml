name: PR Validation

on:
  pull_request:
    branches: [ main, dev ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          # Vérifier le format des messages de commit
          git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%s" | while read commit_msg; do
            if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\([a-z]+\))?: .+$"; then
              echo "❌ Invalid commit message format: $commit_msg"
              echo "Format should be: type(scope): message"
              exit 1
            fi
          done

      - name: Check for sensitive data
        run: |
          # Liste de patterns sensibles
          patterns=(
            "password"
            "api[_-]?key"
            "secret"
            "token"
            "credentials"
          )
          
          # Vérifier les fichiers modifiés
          for pattern in "${patterns[@]}"; do
            if git diff origin/${{ github.base_ref }}..HEAD | grep -i "$pattern"; then
              echo "❌ Potential sensitive data found: $pattern"
              exit 1
            fi
          done

      - name: Validate documentation
        run: |
          # Vérifier la présence des fichiers essentiels
          required_files=(
            "README.md"
            "DEVBOOK.md"
            "GUIDELINES.md"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
          done

      - name: Check file size
        run: |
          # Limite de taille en Mo
          MAX_SIZE_MB=50
          
          # Vérifier chaque fichier modifié
          git diff --name-only origin/${{ github.base_ref }}..HEAD | while read file; do
            if [ -f "$file" ]; then
              size=$(du -m "$file" | cut -f1)
              if [ "$size" -gt "$MAX_SIZE_MB" ]; then
                echo "❌ File too large: $file ($size MB > $MAX_SIZE_MB MB)"
                exit 1
              fi
            fi
          done
